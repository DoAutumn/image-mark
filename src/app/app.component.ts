import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.less']
})
export class AppComponent {
  title = 'image-mark';
  string = '实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。实际项目开发中，你会需要对 TypeScript 代码的构建、调试、代理、打包部署等一系列工程化的需求。 我们强烈建议使用官方的 @angular/cli 工具链辅助进行开发，下面我们用一个简单的实例来说明。';
}
